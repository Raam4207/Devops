Bash Script
A bash script is a series of commands written in a file. These are read and executed by the bash program. The program executes line by line.
Identify a Bash Script
File extension of .sh.
Scripts start with a bash bang.
Scripts are also identified with a shebang. Shebang is a combination of bash # and bang !  
#! /bin/bash

An execution right is represented by x. In the example below, my user has the rwx (read, write, execute) rights for the file test_script.sh

simple script in bash that outputs Hello World.

Create a file named :- hello_world.sh
$ touch hello_world.sh
Find the path to your bash shell.
$ which bash
Here, the path is /usr/bin/bash and I will include this in the shebang.

Write the command.
We will $ echo "hello world" to the console.

$ vi hello_world.sh
#! /usr/bin/bash
echo "Hello World"

Provide execution rights to your user.
chmod u+x hello_world.sh

Run the script in 2 ways as below
./hello_world.sh
or
bash hello_world.sh.

define variables
We can define a variable by using the syntax below
variable_name=value 
To get the value of the variable, add $ before the variable.

#!/bin/bash
# A simple variable example
greeting=Hello
name=Tux
echo $greeting $name

Arithmetic Expressions
OPERATOR	USAGE
+		addition
-		subtraction
*		multiplication
/		division
**		exponentiation
%		modulus
Let's run a few examples.
Numerical expressions can also be calculated and stored in a variable using the syntax below:

var=$((expression))
example:-
#!/bin/bash
var=$((3+9))
echo $var

For decimal calculations, we can use bc command to get the output to a particular number of decimal places. bc (Bash Calculator) is a command line calculator that supports calculation up to a certain number of decimal points.
echo "scale=2;22/7" | bc

read user input
Sometimes you'll need to gather user input and perform relevant operations.
In bash,input using the read command.
read variable_name
To prompt the user with a custom message, use the -p flag.
read -p "Enter your age" variable_name

Example:
#!/bin/bash
echo "Enter a numner"
read a
echo "Enter a numner"
read b
var=$((a+b))
echo $var

Numeric Comparison logical operators
Comparison is used to check if statements evaluate to true or false. We can use the below shown operators to compare two statements:
OPERATION	 		SYNTAX				EXPLANATION
Equality			num1 -eq num2	 		num1 equal to num2
Greater than equal to		num1 -ge num2	is 		nm1 grtr thn equal to num2
Greater than			num1 -gt num2	is 		num1 greater than num2
Less than equal to		num1 -le num2	is		 num1 less than equal to num2
Less than			num1 -lt num2	is 		num1 less than num2
Not Equal to			num1 -ne num2	is 		num1 not equal to num2

Syntax:
	if [ conditions ]
    	then
       		commands
	 fi
 	Example:
 	Let's compare two numbers and find their relationship:
 	#!bash/bin
 	read x
 	read y
 	if [ $x -gt $y ]
	  then
	 echo X is greater than Y
	 elif [ $x -lt $y ]
	  then
	 echo X is less than Y
	   elif [ $x -eq $y ]
	   then
	     echo X is equal to Y
	  fi

	     Conditional Statements (Decision Making)
	     Syntax:
	     if [[ condition ]]
	     then
	     	statement
	     elif [[ condition ]]; then
		statement 
	     else
		do this by default
		fi

	      Example: Let's find the triangle type by reading the lengths of its sides.
	     			 #!bash/bin
	       			 read a
	       			 read b
				read c
				if [ $a == $b -a $b == $c -a $a == $c ]
				then
				echo EQUILATERAL
				elif [ $a == $b -o $b == $c -o $a == $c ]
				then 
				echo ISOSCELES
				else
				echo SCALENE
				fi

				Looping with numbers:
				In the example below, 
				#!/bin/bash
				for i in {1..5}
				do
				    echo $i
				    done

				    #!/bin/bash
				    for X in cyan magenta yellow  
				    do
				    	echo $X
					done

					while loop example below, 
					#!/bin/bash
					i=1
					while [[ $i -le 10 ]] ; do
					   echo "$i"
					     (( i += 1 ))
					     done

					     We can read the file line by line and print the output on the screen.
					     #!/bin/bash
					     LINE=1
					     while read -r CURRENT_LINE
					     	do
								echo "$LINE: $CURRENT_LINE"
								    ((LINE++))
								    done < "sample_file.txt"

								    execute commands with back ticks
								    Syntax:
								    var= ` commands `
								    To include it in the bash script, we can enclose it in back ticks.
								    #!/bin/bash
								    var=`df -h | grep tmpfs`
								    echo $var

								    get arguments for scripts from the command line
								    $@ represents the position of the parameters, starting from one.
								    #!/bin/bash
								    for x in $@
								    do
								        echo "Entered arg is $x"
									done

									Run it like this:
									./script arg1 arg2

Automate Scripts by Scheduling via cron Jobs Cron is a job scheduling utility present in Unix like systems. You can schedule jobs to execute daily, weekly, monthly or in a specific time of the day. Automation in Linux heavily relies on cron jobs.
									Below is the syntax to schedule crons:
									# Cron job example
									* * * * * sh /path/to/script.sh
									Here, * represents minute(s) hour(s) day(s) month(s) weekday(s), respectively.
									Below are some examples of scheduling cron jobs.
									SCHEDULE	SCHEDULED VALUE
									5 0 * 8 *	At 00:05 in August.
									5 4 * * 6	At 04:05 on Saturday.
									0 22 * * 1-5	At 22:00 on every day-of-week from Monday through Friday.

									$ crontab -l  :-lists the already scheduled scripts for a particular user.									The find command helps to locate files based on certain patterns. As most of the scripts end with .sh, we can use the find script like this:
									$ find . -type f -name "*.sh"
									Where,
									. represents the current directory. You can change the path accordingly.
									-type f indicates that the file type we are looking for is a text based file.
									*.sh tells to match all files ending with .sh.


